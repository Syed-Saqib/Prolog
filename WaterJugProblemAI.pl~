% Define the capacities of the jugs
capacity(a, 4).
capacity(b, 3).

% Define the goal state
goal(jug(2, _)).

% Define the possible actions
action(jug(X, Y), jug(Z, Y)) :- % Fill jug A from the tap
    capacity(a, M),
    X < M,
    Z is M.

action(jug(X, Y), jug(Z, Y)) :- % Empty jug A to the drain
    X > 0,
    Z is 0.

action(jug(X, Y), jug(X, Z)) :- % Fill jug B from the tap
    capacity(b, N),
    Y < N,
    Z is N.

action(jug(X, Y), jug(X, Z)) :- % Empty jug B to the drain
    Y > 0,
    Z is 0.

action(jug(X, Y), jug(Z, W)) :- % Pour water from jug A to jug B
    X > 0,
    Y < 3,
    capacity(b, N),
    S is X + Y,
    S =< N,
    Z is 0,
    W is S.

action(jug(X, Y), jug(Z, W)) :- % Pour water from jug A to jug B
    X > 0,
    Y < 3,
    capacity(b, N),
    S is X + Y,
    S > N,
    Z is S - N,
    W is N.

action(jug(X, Y), jug(Z, W)) :- % Pour water from jug B to jug A
    Y > 0,
    X < 4,
    capacity(a, M),
    S is X + Y,
    S =< M,
    Z is S,
    W is 0.

action(jug(X, Y), jug(Z, W)) :- % Pour water from jug B to jug A
    Y > 0,
    X < 4,
    capacity(a, M),
    S is X + Y,
    S > M,
    Z is M,
    W is S - M.

% Define a predicate to check if a state has been visited before
visited(State, [State|_]).
visited(State, [_|Rest]) :-
    visited(State, Rest).

% Define a predicate to perform depth-first search
dfs(State, _, []) :-
    goal(State).

dfs(State1, History, [_|Moves]) :-
    action(State1, State2),
    not(visited(State2, History)),
    dfs(State2, [State2|History], Moves).

% Define a predicate to test the solution
test_dfs(Moves) :-
   dfs(jug(0, 0), [jug(0, 0)], Moves).
