


% Water Jug Problem

% Predicate to check if the state is a valid state
valid_state(State, MaxX, MaxY) :-
    State = state(X, Y),
    X >= 0,
    Y >= 0,
    X =< MaxX,
    Y =< MaxY.

% Predicate to check if the state is the goal state
goal_state(state(_, Y), GoalY) :-
    Y =:= GoalY.

% Predicate to pour water from one jug to another
pour(state(X1, Y1), state(X2, Y2), MaxX, MaxY, From, To) :-
    % Pour as much water as possible
    (   From = x,
        To = y,
        Diff is min(X1, MaxY - Y1),
        X2 is X1 - Diff,
        Y2 is Y1 + Diff
    ;   From = y,
        To = x,
        Diff is min(Y1, MaxX - X1),
        Y2 is Y1 - Diff,
        X2 is X1 + Diff
    ).

% Predicate to solve the Water Jug problem
solve_jug_problem(MaxX, MaxY, GoalY, Solution) :-
    initial_state(InitialState),
    solve_jug_problem(InitialState, MaxX, MaxY, GoalY, [], Solution).

% Helper predicate to solve the Water Jug problem
solve_jug_problem(State, _, _, GoalY, Solution, Solution) :-
    goal_state(State, GoalY).

solve_jug_problem(State, MaxX, MaxY, GoalY, Visited, Solution) :-
    valid_state(State, MaxX, MaxY),
    \+ member(State, Visited),  % Avoid revisiting states
    pour(State, NextState, MaxX, MaxY, _, _),
    solve_jug_problem(NextState, MaxX, MaxY, GoalY, [State | Visited], Solution).

% Initial state (both jugs empty)
initial_state(state(0, 0)).
